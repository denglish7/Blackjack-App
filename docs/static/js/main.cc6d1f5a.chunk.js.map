{"version":3,"sources":["components/Messages.js","redux/store.js","redux/actionConstants.js","client.js","redux/actions.js","components/Form.js","components/ChatBox.js","components/BetForm.js","components/ActionForm.js","components/Hand.js","components/Player.js","components/Dealer.js","components/Main.js","components/JoinGame.js","components/Slide.js","components/SlideIndicator.js","components/OnboardingSlides.js","views/App.js","serviceWorker.js","index.js"],"names":["Messages","messages","useSelector","state","messagesEndRef","useRef","useEffect","current","scrollIntoView","behavior","Table","striped","bordered","className","map","message","index","key","ref","LOGIN_STATE","GAME_STATUS","FINAL_STATUS","ACTION_TYPE","INITIAL_STATE","isConnected","onboardingComplete","gameStarted","loginState","gameStatus","table","playerId","playingPlayerId","players","action","dealer","hand","handValue","didBust","hitBlackjack","createStore","type","payload","clientId","applyMiddleware","thunkMiddleware","host","socket","require","connect","secure","console","log","on","msg","result","store","dispatch","newMessage","getPlayers","requestBetById","requestActionById","bettingDone","startGameSuccess","startingGame","startGameError","username","joinGame","invalidUsername","setClientId","endGame","emit","playerGotBlackjack","endHand","connectToGame","checkUsername","sendToChat","sendMessage","start","submitBet","placeNewBet","newChips","newBet","placeBet","userTakeAction","actionType","takeAction","Form","useState","messageTxt","setMessageTxt","isValid","setIsValid","useDispatch","FormGroup","Label","for","Input","id","placeholder","value","onChange","event","target","length","Button","disabled","onClick","ChatBox","BetForm","props","invalidBet","setInvalidBet","notMin","setNotMin","addToBet","amount","currentChips","chips","currentBet","bet","Row","fullChips","clearBet","ActionForm","submitAction","handSize","Hand","getMargin","cards","card","style","float","marginRight","src","process","alt","image","Player","xs","sm","classname","finalStatus","Dealer","Col","Main","playerView","Object","keys","isPlaying","md","JoinGame","setUsername","processInput","verifyUsername","onKeyUp","keyCode","invalid","FormFeedback","Slide","slideStatus","children","SlideIndicator","clickHandler","OnboardingSlides","activeSlide","setActiveSlide","setSlideState","slideId","indicators","i","push","slideID","generateSlideIndicators","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc6d1f5a.chunk.js","sourcesContent":["import React, { useEffect, useRef }from \"react\";\nimport {Table} from \"reactstrap\";\nimport {useSelector} from \"react-redux\";\n\nconst Messages = () => {\n    const messages = useSelector(state => state.messages);\n    const messagesEndRef = useRef(null);\n    const scrollToBottom = () => {\n        messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    useEffect(scrollToBottom, [messages]);\n\n    return  (\n        <>\n            <Table striped bordered className=\"my-4\">\n                <tbody>\n                    {\n                        messages.map((message,  index) =>\n                            <tr key={`msg-${index}`}>\n                                <td>{message}</td>\n                            </tr>)\n                    }\n                </tbody>\n                \n            </Table>\n            <div ref={messagesEndRef} />\n        </>\n    )\n}\n\nexport default Messages;","import {createStore, applyMiddleware} from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {\n    NEW_MESSAGE,\n    ONBOARDING_COMPLETE,\n    CONNECTED, \n    START_GAME_SUCCESS, \n    SET_CLIENT_ID, \n    INVALID_USERNAME, \n    REQUEST_BET_BY_ID,\n    REQUEST_ACTION_BY_ID,\n    GET_PLAYERS,\n    BETTING_DONE,\n    END_HAND,\n    GAME_OVER\n} from \"./actionConstants\";\n\n\nexport const LOGIN_STATE = {\n    LOGGED_IN: \"logged in\",\n    LOGGED_OUT: \"logged out\",\n    INVALID_LOGIN: \"invalid login\",\n    NETWORK_ERROR: \"network error\"\n}\n\nexport const GAME_STATUS = {\n    GETTING_BETS: \"GETTING_BETS\",\n    DEALING_CARDS: \"DEALING_CARDS\",\n    TAKING_ACTIONS: \"TAKING_ACTIONS\",\n    HAND_OVER: \"HAND_OVER\"\n}\n\nexport const FINAL_STATUS = {\n    DID_WIN: \"DID_WIN\",\n    DID_LOSE: \"DID_LOSE\",\n    DID_BUST: \"DID_BUST\",\n    HIT_BLACKJACK: \"HIT_BLACKJACK\",\n    DID_PUSH: \"DID_PUSH\"\n}\n\nexport const ACTION_TYPE = {\n    HIT: \"HIT\",\n    NEXT: \"NEXT\",\n    SURRENDER: \"SURRENDER\",\n    DOUBLE_DOWN: \"DOUBLE_DOWN\",\n    SPLIT: \"SPLIT\"\n}\n\nconst INITIAL_STATE = {\n    isConnected: false,\n    onboardingComplete: false,\n    gameStarted: false,\n    loginState: LOGIN_STATE.LOGGED_OUT,\n    gameStatus: null,\n    messages: [],\n    table: [],\n    playerId: \"\",\n    playingPlayerId: \"\",\n    players: {},\n    action: null,\n    dealer: {\n        hand: [],\n        handValue: 0,\n        didBust: false,\n        hitBlackjack: false\n    }\n}\n\nconst rootReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case ONBOARDING_COMPLETE:\n            return {\n                ...state,\n                onboardingComplete: true\n            }\n        case BETTING_DONE: \n            return {\n                ...state,\n                gameStatus: GAME_STATUS.DEALING_CARDS\n            }\n        case GET_PLAYERS:\n            return {\n                ...state,\n                players: action.payload.players,\n                dealer: action.payload.dealer\n            }\n        case START_GAME_SUCCESS:\n            return {\n                ...state,\n                gameStarted: true,\n                players: action.payload.players,\n                dealer: action.payload.dealer\n            }\n        case REQUEST_ACTION_BY_ID:\n            return {\n                ...state,\n                gameStatus: GAME_STATUS.TAKING_ACTIONS,\n                playingPlayerId: action.payload.playerId\n            }\n        case REQUEST_BET_BY_ID:\n            return {\n                ...state,\n                gameStatus: GAME_STATUS.GETTING_BETS,\n                playingPlayerId: action.payload.playerId\n            }\n        case SET_CLIENT_ID:\n            return {\n                ...state,\n                playerId: action.payload.clientId\n            }\n        case NEW_MESSAGE:\n            return {...state, messages: action.payload.messages}\n        case INVALID_USERNAME:\n            return {...state, loginState: LOGIN_STATE.INVALID_LOGIN}\n        case CONNECTED:\n            return {\n                ...state,\n                loginState: LOGIN_STATE.LOGGED_IN,\n                isConnected: true,\n                players: action.payload.players,\n                table: action.payload.table\n            }\n        case END_HAND:\n            return {\n                ...state,\n                players: action.payload.players,\n                dealer: action.payload.dealer,\n                gameStatus: GAME_STATUS.HAND_OVER\n            }\n        case GAME_OVER:\n            return INITIAL_STATE;\n        default:\n            return state;\n    }\n}\n\nexport default createStore(rootReducer, applyMiddleware(thunkMiddleware));","export const NEW_MESSAGE = \"NEW_MESSAGE\";\nexport const ONBOARDING_COMPLETE = \"ONBOARDING_COMPLETE\";\nexport const CONNECTED = \"CONNECTED\";\nexport const STARTING_GAME = \"STARTING_GAME\";\nexport const START_GAME_SUCCESS = \"START_GAME_SUCCESS\";\nexport const START_GAME_FAIL = \"START_GAME_FAIL\";\nexport const INVALID_USERNAME = \"INVALID_USERNAME\";\nexport const SET_CLIENT_ID = \"SET_CLIENT_ID\";\nexport const REQUEST_BET_BY_ID = \"REQUEST_BET_BY_ID\";\nexport const REQUEST_ACTION_BY_ID = \"REQUEST_ACTION_BY_ID\";\nexport const GET_PLAYERS = \"GET_PLAYERS\";\nexport const BETTING_DONE = \"BETTING_DONE\";\nexport const PLAYER_BLACKJACK = \"PLAYER_BLACKJACK\";\nexport const END_HAND = \"END_HAND\";\nexport const GAME_OVER = \"GAME_OVER\";","import store from \"./redux/store\";\nimport {\n    newMessage,\n    isConnected,\n    startGameSuccess,\n    invalidUsername,\n    startGameError,\n    startingGame,\n    setClientId,\n    requestBetById,\n    getPlayers,\n    bettingDone,\n    endGame,\n    endHand,\n    requestActionById,\n    playerGotBlackjack\n} from \"./redux/actions\";\n\n/** CLIENT CONFIGURATION - connect to the server */\nconst socketIOClient = require(\"socket.io-client\");\n\n// When deployed, connect to the hosted server, otherwise connect to local server\n// Localhost port must match server\nlet host = process.env.NODE_ENV === 'production' ?\n    \"appname.herokuapp.com\" : \"localhost:4002\"\nlet socket = socketIOClient.connect(host, {secure: true});\n// Checks which host we're connected to (for troubleshooting);\nconsole.log(\"connected to \" + host);\n\nsocket.on(\"notification\", msg => {\n    console.log(\"Server says: \" + msg);\n})\n\nsocket.on(\"all messages\", result => {\n    store.dispatch(newMessage(result));\n})\n\nsocket.on(\"game joined\", (players, table) => {\n    store.dispatch(isConnected(players, table));\n})\n\nsocket.on(\"get players\", (players, dealer) => {\n    console.log(\"get playeres heres players\", players);\n    console.log(\"get players heres dealer\", dealer);\n    store.dispatch(getPlayers(players, dealer));\n})\n\nsocket.on(\"request bet for player\", (playerId) => {\n    console.log(\"requesting bet for \", playerId)\n    store.dispatch(requestBetById(playerId));\n})\n\nsocket.on(\"request action for player\", (playerId) => {\n    store.dispatch(requestActionById(playerId))\n})\n\nsocket.on(\"betting done\", () => {\n    store.dispatch(bettingDone());\n})\n\nsocket.on(\"start game success\", (players, dealer) => {\n    store.dispatch(startGameSuccess(players, dealer));\n})\n\nsocket.on(\"table full\", () => {\n    console.log(\"table fulllllllll\")\n})\n\nsocket.on(\"starting game\", () => {\n    store.dispatch(startingGame());\n})\n\nsocket.on(\"start game failure\", () => {\n    store.dispatch(startGameError());\n})\n\nsocket.on(\"valid username\", (username) => {\n    joinGame(username);\n})\n\nsocket.on(\"invalid username\", () => {\n    store.dispatch(invalidUsername());\n})\n\nsocket.on(\"client id\", (clientId) => {\n    store.dispatch(setClientId(clientId));\n})\n\nsocket.on(\"player disconnected\", (players, dealer) => {\n    store.dispatch(getPlayers(players, dealer));\n})\n\nsocket.on(\"new game\", () => {\n    store.dispatch(endGame());\n})\n\nsocket.on(\"dealer hit\", (dealer) => {\n    socket.emit(\"check dealer hand\", dealer);\n})\n\nsocket.on(\"player got blackjack\", (players) => {\n    store.dispatch(playerGotBlackjack(players))\n})\n\nsocket.on(\"table full\", () =>{\n    // do this\n})\n\nsocket.on(\"end hand\", (players, dealer) => {\n    store.dispatch(endHand(players, dealer));\n})\n\n\n// This process will allow different clients to have duplicate usernames! A real \n// application should first check with the server to make sure the client's\n// username is unique.\nexport const checkUsername = username => {\n    socket.emit(\"check username\", username);\n}\n\nexport const joinGame = username => {\n    socket.emit(\"join\", username);\n}\n\nexport const sendMessage = msg => {\n    socket.emit(\"new message\", msg);\n}\n\nexport const startGame = () => {\n    socket.emit(\"start game\");\n}\n\nexport const startNewHand = () => {\n    socket.emit(\"start new hand\");\n}\n\nexport const placeBet = (playerId, newChips, newBet) => {\n    socket.emit(\"new bet\", playerId, newChips, newBet);\n}\n\nexport const submittingBet = () => {\n    socket.emit(\"submitting bet\");\n}\n\nexport const takeAction = (playerId, actionType) => {\n    socket.emit(\"new action\", playerId, actionType);\n}","import {\n    NEW_MESSAGE, \n    CONNECTED,\n    STARTING_GAME,\n    START_GAME_SUCCESS,\n    START_GAME_FAIL,\n    INVALID_USERNAME,\n    SET_CLIENT_ID,\n    REQUEST_BET_BY_ID,\n    REQUEST_ACTION_BY_ID,\n    GET_PLAYERS,\n    BETTING_DONE,\n    PLAYER_BLACKJACK,\n    ONBOARDING_COMPLETE,\n    GAME_OVER,\n    END_HAND\n} from \"./actionConstants\";\nimport {checkUsername, sendMessage, startGame, submittingBet, placeBet, takeAction, startNewHand} from \"../client\";\n\nexport const requestBetById = (playerId) => ({\n    type: REQUEST_BET_BY_ID,\n    payload: {\n        playerId\n    }\n})\n\nexport const completeOnboarding = () => ({\n    type: ONBOARDING_COMPLETE\n})\n\nexport const requestActionById = (playerId) => ({\n    type: REQUEST_ACTION_BY_ID,\n    payload: {\n        playerId\n    }\n})\n\nexport const setClientId = (clientId) => ({\n    type: SET_CLIENT_ID,\n    payload: {\n        clientId\n    }\n})\n\nexport const startingGame = () => ({\n    type: STARTING_GAME\n})\n\n\nexport const getPlayers = (players, dealer) => ({\n    type: GET_PLAYERS,\n    payload: {\n        players,\n        dealer\n    }\n})\n\nexport const bettingDone = () => ({\n    type: BETTING_DONE\n})\n\nexport const playerGotBlackjack = (playerId) => ({\n    type: PLAYER_BLACKJACK,\n    payload: {\n        playerId\n    }\n})\n\nexport const startGameSuccess = (players, dealer) => ({\n    type: START_GAME_SUCCESS,\n    payload: {\n        players,\n        dealer\n    }\n})\n\nexport const startGameError = () => ({\n    type: START_GAME_FAIL\n})\n\nexport const isConnected = (players, table) => ({\n    type: CONNECTED,\n    payload: {\n        players,\n        table\n    }\n})\n\nexport const newMessage = messages => ({\n    type: NEW_MESSAGE,\n    payload: {\n        messages\n    }\n})\n\nexport const endHand = (players, dealer) => ({\n    type: END_HAND,\n    payload: {\n        players,\n        dealer\n    }\n})\n\n\nexport const invalidUsername = () => ({\n    type: INVALID_USERNAME\n})\n\nexport const endGame = () => ({\n    type: GAME_OVER\n})\n\nexport const connectToGame = username => {\n    return dispatch => checkUsername(username);\n}\n\nexport const sendToChat = msg => {\n    return dispatch => sendMessage(msg);\n}\n\nexport const start = () => {\n    return dispatch => {\n        startGame();\n    }\n}\n\nexport const submitBet = () => {\n    return dispatch => {\n        submittingBet();\n    }\n}\n\nexport const placeNewBet = (playerId, newChips, newBet) => {\n    return dispatch => {\n        placeBet(playerId, newChips, newBet);\n    }\n}\n\nexport const userTakeAction = (playerId, actionType) => {\n    return dispatch => {\n        takeAction(playerId, actionType);\n    }\n}\n\nexport const newHand = () => {\n    return dispatch => {\n        startNewHand();\n    }\n}\n\n","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {FormGroup, Input, Label, Button } from \"reactstrap\";\nimport {sendToChat} from \"../redux/actions\";\n\nconst Form = () => {\n    const [messageTxt, setMessageTxt] = useState(\"\");\n    const [isValid, setIsValid] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const sendMessageAndClearForm = () => {\n        dispatch(sendToChat(messageTxt));\n        setMessageTxt(\"\");\n    }\n\n    const processInput = event => {\n        setMessageTxt(event.target.value);\n        if (event.target.value.length > 0) {\n            setIsValid(true);\n        } else {\n            setIsValid(false);\n        }\n    }\n\n    return (\n        <div className=\"chatform\">\n            <FormGroup>\n                <Label for=\"messageTxt\">Your message:</Label>\n                <Input id=\"messageTxt\" type=\"textarea\"\n                    placeholder=\"Enter your message\" value={messageTxt}\n                    onChange={processInput}/>\n            </FormGroup>\n            <Button className=\"float-right\" disabled={isValid === false}\n                onClick={sendMessageAndClearForm}>\n                    Send\n            </Button>\n        </div>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport Messages from \"../components/Messages\";\nimport Form from \"../components/Form\";\n\nconst ChatBox = () => {\n    return (\n        <>\n            <div className=\"chatbox\">\n                <Messages/> \n            </div>\n            <Form/>\n        </>\n  )\n}\n\nexport default ChatBox;","import React, {useState} from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Button, Row} from \"reactstrap\";\nimport {placeNewBet, submitBet} from \"../redux/actions\";\n\nconst BetForm = (props) => {\n    const [invalidBet, setInvalidBet] = useState(false);\n    const playerId = useSelector(state => state.playerId);\n    const players = useSelector(state => state.players);\n    const [notMin, setNotMin] = useState(false);\n\n    const dispatch = useDispatch();\n\n    const addToBet = (amount) => {\n        if (amount >= 5) {\n            setNotMin(false);\n        }\n        let currentChips = players[playerId].chips;\n        let currentBet = players[playerId].bet;\n        if (amount <= currentChips) {\n            let newChips = currentChips - amount;\n            let newBet = currentBet + amount;\n            dispatch(placeNewBet(playerId, newChips, newBet));\n            setInvalidBet(false);\n        } else {\n            setInvalidBet(true);\n        }\n    }\n\n    const clearBet = () => {\n        let fullChips = players[playerId].chips + players[playerId].bet;\n        let emptyBet = 0;\n        dispatch(placeNewBet(playerId, fullChips, emptyBet));\n        setInvalidBet(false);\n    }\n\n    const placeBet = () => {\n        if (players[playerId].bet < 5) {\n            setNotMin(true);\n        } else {\n            dispatch(submitBet());\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"chip-container\">\n                <Row>\n                    {invalidBet === true ? <p>not enough chips</p> : null }\n                    { notMin === true ? <p>must bet at least 5 chips</p> : null}\n\n                </Row>\n                    <div onClick={() => addToBet(5)} className=\"chip\">5</div>\n                    <div onClick={() => addToBet(25)} className=\"chip\">25</div>\n                    <div onClick={() => addToBet(50)} className=\"chip\">50</div>\n\n            </div>\n            <Button className=\"button\" onClick={() => clearBet()}>Clear</Button>\n            <Button className=\"button\" onClick={() => placeBet()}>Bet</Button>\n        </div>\n    )\n}\n\nexport default BetForm;","import React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Button} from \"reactstrap\";\nimport {userTakeAction} from \"../redux/actions\";\nimport { ACTION_TYPE } from '../redux/store';\n\nconst ActionForm = (props) => {\n    const playerId = useSelector(state => state.playerId);\n    \n    \n    const dispatch = useDispatch();\n\n    const submitAction = (actionType) => {\n        dispatch(userTakeAction(playerId, actionType));\n    }\n\n    return (\n        <div>\n            <div className=\"chip-container\">\n                <Button className=\"button\" onClick={() => submitAction(ACTION_TYPE.HIT)}>HIT</Button>\n                <Button className=\"button\" onClick={() => submitAction(ACTION_TYPE.NEXT)}>STAY</Button>\n                {\n                    props.handSize === 2 ? <Button onClick={() => submitAction(ACTION_TYPE.DOUBLE_DOWN)}>DOUBLE DOWN</Button> : null\n                }\n            </div>\n        </div>\n\n    )\n}\n\nexport default ActionForm;","import React from \"react\";\n\nconst Hand = (props) => {\n    const INTERVAL = 15;\n    const getMargin = (index) => {\n        let margin = index * INTERVAL;\n        let marginString = margin + \"px\"\n        return marginString;\n    }\n\n    const cards = props.cards.map((card, index) => {\n        if (card.value === null) {\n            return <li key={index} style={{float: \"right\", marginRight: getMargin(index)}}><img className=\"card\" key={index} src={process.env.PUBLIC_URL + \"/images/playing-card.png\"} alt=\"card\" /></li>\n        }\n        return <li key={index} style={{float: \"right\", marginRight: getMargin(index)}}><img className=\"card\" key={index} src={card.image} alt=\"card\" /></li>\n    })\n    \n    return (\n        <div className=\"hand\">\n            <ul>\n                {cards}\n            </ul>\n        </div>\n        \n    )\n}\n\nexport default Hand;","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport { Row } from \"reactstrap\";\nimport BetForm from \"../components/BetForm\";\nimport ActionForm from \"../components/ActionForm\";\nimport Hand from \"../components/Hand\";\nimport { GAME_STATUS, FINAL_STATUS } from '../redux/store';\n\nconst Player = (props) => {\n    const playingPlayerId = useSelector(state => state.playingPlayerId);\n    const playerId = useSelector(state => state.playerId);\n    const players = useSelector(state => state.players);\n    const gameStatus = useSelector(state => state.gameStatus);\n    const chips = players[playerId].chips;\n\n    const getMessage = () => {\n        if (props.finalStatus === FINAL_STATUS.DID_BUST) {\n            return <h3>Busted</h3>\n        } else if (props.finalStatus === FINAL_STATUS.HIT_BLACKJACK) {\n            return <h3>Blackjack!</h3>\n        } else if (props.finalStatus === FINAL_STATUS.DID_PUSH) {\n            return <h3>Push</h3>;\n        } else if (props.finalStatus === FINAL_STATUS.DID_WIN) {\n            return <h3>{props.username} won!</h3>\n        } else if (props.finalStatus === FINAL_STATUS.DID_LOSE){\n            return <h3>{props.username} lost.</h3>\n        } else {\n            return null;\n        }\n    }\n\n    return (\n        <div className=\"player-container\" xs=\"6\" sm=\"4\">\n            <Row className=\"row-container\">\n                <h3 className=\"username\">{props.username}</h3>\n\n            </Row>\n            <Row className=\"row-container\">\n                {\n                    props.id === playerId ? <p className=\"username\">chips: {chips}</p> : <p className=\"username\">{players[props.id].chips}</p>\n                }\n            </Row>\n            <Row className=\"row-container\">\n                {\n                    players[props.id].bet !== 0 ? \n                        <div className=\"bet-area\">\n                            <div classname=\"chip\">\n                                {players[props.id].bet}\n                            </div>\n                        </div>\n                            : <div className=\"bet-area\"></div> \n                }\n                {\n                    props.id === playingPlayerId && props.id === playerId && gameStatus === GAME_STATUS.GETTING_BETS ?\n                        <BetForm {...props} /> \n                        : null\n                }\n            </Row>\n            <Row className=\"row-container\">\n                { getMessage() }\n            </Row>\n\n            <Row className=\"row-container\">\n                {\n                    props.id === playingPlayerId && props.id === playerId &&\n                        gameStatus === GAME_STATUS.TAKING_ACTIONS ?\n                        <ActionForm handSize={props.hand.length}/> \n                        : null\n                }\n            </Row>\n\n            <Row className=\"row-container\">\n                { props.hand.length > 0 ? <Hand cards={props.hand} /> : null }\n            </Row>\n        </div>\n    )\n}\n\nexport default Player;","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {Col} from \"reactstrap\";\nimport Hand from \"../components/Hand\";\nimport { FINAL_STATUS } from '../redux/store';\n\nconst Dealer = () => {\n    const dealer = useSelector(state => state.dealer);\n\n    const getMessage = () => {\n        if (dealer.finalStatus === FINAL_STATUS.DID_BUST) {\n            return <h3>Dealer Busted</h3>\n        } else if (dealer.finalStatus === FINAL_STATUS.HIT_BLACKJACK) {\n            return <h3>Dealer Hit Blackjack</h3>\n        } else {\n            return null;\n        }\n    }\n\n    return (\n        <Col className=\"player-container\" xs=\"6\" sm=\"4\">\n            <p>Dealer</p>\n            <div>\n                {getMessage()}\n            </div>\n            {\n                dealer.hand.length > 0 ? <Hand cards={dealer.hand} /> : null\n            }\n\n        </Col>\n    )\n}\n\nexport default Dealer;","import React from 'react';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {Button, Row, Col} from \"reactstrap\";\nimport ChatBox from \"../components/ChatBox\";\nimport Player from \"../components/Player\";\nimport Dealer from \"../components/Dealer\";\nimport { start } from \"../redux/actions\";\nimport { GAME_STATUS } from '../redux/store';\n\nconst Main = () => {\n    const players = useSelector(state => state.players);\n    const playerId = useSelector(state => state.playerId);\n    const username = players[playerId].username;\n    const gameStarted = useSelector(state => state.gameStarted);\n    const gameStatus = useSelector(state => state.gameStatus);\n\n    const dispatch = useDispatch();\n\n    const playerView = Object.keys(players).map((id, index) => {\n        if (players[id].isPlaying === true) {\n            return <Col sm={12} xs={12} md={4}><Player key={index} id={id} {...players[id]} /></Col>;\n        }\n        return null;\n    })\n\n    return (\n        <div className=\"main\">\n            <div className=\"welcome\">\n                <h3>Welcome {username}</h3>\n                {\n                    gameStatus === GAME_STATUS.HAND_OVER ? <Button className=\"button\" onClick={() => dispatch(start())}>New Hand</Button> : null\n                }\n                {\n                    gameStarted === false ? <Button className=\"button\" onClick={() => dispatch(start())}>Start Game</Button> : null\n                }\n            </div>\n            <Row>\n                <div>\n                    <Dealer />\n                </div>\n            </Row>\n            <Row>\n                {playerView}\n            </Row>\n\n            <ChatBox />\n\n        </div>\n        \n  )\n}\n\nexport default Main;","import React, {useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport { FormGroup, Label, Input, FormFeedback, Button } from \"reactstrap\";\nimport { connectToGame } from \"../redux/actions\";\nimport { LOGIN_STATE } from \"../redux/store\";\n\nconst JoinGame = () => {\n    const [username, setUsername] = useState(\"\");\n    const [isValid, setIsValid] = useState(true);\n    const loginState = useSelector(state => state.loginState);\n\n    const dispatch = useDispatch();\n\n    const processInput = event => {\n        if (event.target.value.length > 0)\n            setIsValid(true);\n        else setIsValid(false);\n        setUsername(event.target.value);\n    }\n\n    const verifyUsername = () => {\n        if (username.length > 0) {\n            console.log(\"clicked herjekfdjk\");\n            dispatch(connectToGame(username))\n        } else {\n            setIsValid(false);\n        }\n    }\n\n    const onKeyUp = event => {\n        if (event.keyCode === 13)\n            verifyUsername();\n    }\n\n    return (\n        <>\n            <FormGroup className=\"mt-4\">\n                <Label for=\"username\">Enter your username:</Label>\n                {\n                    isValid ?\n                        <Input id=\"username\" value={username} \n                            onChange={processInput}\n                            onKeyUp={onKeyUp} />\n                        :\n                        <Input id=\"username\" value={username} invalid\n                            onChange={processInput}\n                            onKeyUp={onKeyUp} />\n                }\n                <FormFeedback invalid=\"true\">Username cannot be empty!</FormFeedback>\n            </FormGroup>\n            {loginState === LOGIN_STATE.INVALID_LOGIN ? <p>Username taken!</p> : null}\n            <Button className=\"float-right my-4\" onClick={verifyUsername}>\n                Join Game\n            </Button>\n        </>\n    )\n}\n\nexport default JoinGame;","import React from \"react\";\n\nconst Slide = (props) => \n    <div className={\"slide-\" + props.slideStatus} >\n        {props.children}\n    </div>\n\nexport default Slide;","import React from \"react\";\n\nconst SlideIndicator = (props) => \n    <button className=\"indicator\" onClick={props.clickHandler} >\n        <div className={\"circle indicator-\" + props.slideStatus}></div>\n    </button>\n\nexport default SlideIndicator;","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport Slide from \"./Slide\";\nimport SlideIndicator from \"./SlideIndicator\";\nimport {completeOnboarding} from \"../redux/actions\";\n\nconst TOTAL_SLIDES = 2;\n\nconst OnboardingSlides = () => {\n    const [activeSlide, setActiveSlide] = useState(1);\n\n    const dispatch = useDispatch();\n\n    const setSlideState = id => {\n        if (id === activeSlide)\n            return \"active\";\n        return \"inactive\";\n    }\n\n    const nextSlide = () => {\n        let id = activeSlide;\n        id < TOTAL_SLIDES ? setActiveSlide(id + 1) : dispatch(completeOnboarding());\n    }\n\n    const generateSlideIndicators = () => {\n        let indicators = [];\n        for (let i = 1; i <= TOTAL_SLIDES; i++) {\n            indicators.push(\n                <SlideIndicator slideStatus={setSlideState(i)} key={i} \n                                slideID={i} \n                                clickHandler={() => setActiveSlide(i)} />\n            )\n        }\n        return indicators;\n    }\n\n    return (\n        <div className=\"slides-bg\">\n            <Slide slideStatus={setSlideState(1)} slideId={1}>\n                <h1>Place your bet by selecting an amount</h1>\n                <p>Click the value you'd like to add to your bet</p>\n                <div className=\"fit my-4\">\n                    <img src={process.env.PUBLIC_URL + \"/images/betting.gif\"}\n                        className=\"my-4 float-right fit slide-image\" alt=\"Blackjack screen gif showing bet funtionality.\" />\n                </div>\n            </Slide>\n            <Slide slideStatus={setSlideState(2)} slideId={2}>\n                <h1>Choose your move</h1>\n                <p>Choose to Hit, Stay, or Double Down if possible\n                </p>\n                <div className=\"fit my-4\">\n                    <img src={process.env.PUBLIC_URL + \"/images/actions.gif\"}\n                         className=\"img-fluid my-4 float-right fit slide-image\"\n                         alt=\"Blackjack screen gif showing actions funtionality.\" />\n                </div>\n            </Slide>\n            <div className=\"slides-controls\">\n                <button className=\"align-left control-btn\" onClick={() => dispatch(completeOnboarding())}>Skip</button>\n                <div className=\"align-center\">\n                    {generateSlideIndicators()}\n                </div>\n                <button className=\"align-right control-btn\" onClick={nextSlide}>\n                    {\n                        activeSlide < TOTAL_SLIDES ? \"Next\" : \"Done\"\n                    }\n                </button>\n            </div>\n        </div>\n    )\n}\nexport default OnboardingSlides;","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport Main from \"../components/Main\";\nimport JoinGame from \"../components/JoinGame\";\nimport OnboardingSlides from '../components/OnboardingSlides';\n\nconst App = () => {\n    const isConnected = useSelector(state => state.isConnected);\n    const onboardingComplete = useSelector(state => state.onboardingComplete);\n\n    const mainScreen = () => {\n        if (onboardingComplete === true) {\n            return <Main />\n        } else {\n            return <OnboardingSlides />\n        }\n    }\n\n    return (\n        <div className=\"main\">\n            {\n                isConnected ?\n                    mainScreen()\n                    :\n                    <JoinGame/>\n            }\n        </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/styles.css';\nimport App from './views/App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}